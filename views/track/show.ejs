<% include ../_partials/head %>
  <% include ../_partials/messages %>
  <main>
    <article class="post">
      <% include _header %>
      <section class="track">
        <figure>
          <figcaption>
            <h2>
              Name: <span id="track-name-field" contenteditable="<%= canWrite %>"><%= track.name %></span>
              <span class="editable-field-control" <%- !canWrite ? 'style="display:none;"' : '' %>>
                <i id="edit-track-name" class="far fa-edit"></i>
                <i id="cancel-edit-track-name" class="fas fa-trash" style="display:none;"></i>
                <i id="save-track-name" class="fas fa-paper-plane" style="display:none;"></i>
              </span>
            </h2>
            <a href="<%= `/${track.path.replace('uploads', 'track')}` %>">
              <%= `/${track.path.replace('uploads', 'track')}` %>
            </a>
          </figcaption>
          <h3>
            Transcript:
            <span class="editable-field-control" <%- !canWrite ? 'style="display:none;"' : '' %>>
              <i id="edit-track-transcript" class="far fa-edit"></i>
              <i id="cancel-edit-track-transcript" class="fas fa-trash" style="display:none;"></i>
              <i id="save-track-transcript" class="fas fa-paper-plane" style="display:none;"></i>
            </span>
          </h3>
          <textarea id="track-transcript-field" value="<%- track.transcript %>" <%= canWrite ? '' : 'disabled' %>><%- track.transcript %></textarea>
          <canvas id="visualizer"></canvas>
          <audio
            id="audio-source"
            controls
            src="<%= `/${track.path}` %>">
              Your browser does not support the
              <code>audio</code> element.
          </audio>
        </figure>
      </section>
      <% if (canWrite) { %>
        <% include _controls %>
      <% } %>

      <% include _feedbackControls %>
      <section class="notes">
        <% for (let note of track.notes) { %>
          <article class="note">
            <header>
              <% if (note.author._id.toString() === agent._id.toString() ||
                     track.recordist._id.toString() === agent._id.toString() ||
                     (process.env.SUDO && process.env.SUDO === agent.email)) { %>
                <% include _noteControls %>
              <% } %>
              <img class="avatar" src="<%= note.author.get('picture') %>" />
              <aside>
                <span><%= note.author.get('nickname') %></span>
                <div class="note-content"><%- marked(note.text) %></div>
              </aside>
            </header>
          </article>
        <% } %>
      </section>
      <section class="likes">
        <% for (let like of track.likes) { %>
          <article class="like">
            <header>
              <img class="avatar" src="<%= like.get('picture') %>" />
              <aside>
                <div><%= like.get('nickname') %> <i class="fas fa-heart">s</i> this</div>
              </aside>
            </header>
          </article>
        <% } %>
      </section>
    </article>
  </main>
  <script>
    let wave = new Wave();
    if (AudioContext) {
      wave.fromElement('audio-source','visualizer', { type: 'wave' });
    }

    /**
     * Edit track name buttons
     */
    const nameField = document.getElementById('track-name-field');
    const editNameButton = document.getElementById('edit-track-name');
    const cancelNameEditButton = document.getElementById('cancel-edit-track-name');
    const saveNameButton = document.getElementById('save-track-name');

    let _originalTrackName = null;

    function setTrackNameEditMode(e) {
      if (_originalTrackName !=='' && !_originalTrackName) {
        _originalTrackName = nameField.innerHTML;
      }
      nameField.focus();
      editNameButton.style.display = 'none';
      cancelNameEditButton.style.display = '';
      saveNameButton.style.display = '';
    };

    function setTrackNameTextMode(e) {
      nameField.blur();
      editNameButton.style.display = '';
      cancelNameEditButton.style.display = 'none';
      saveNameButton.style.display = 'none';
    };

    function resetTrackNameField(e) {
      nameField.innerHTML = _originalTrackName;
      setTrackNameTextMode(e);
    };

    editNameButton.addEventListener('click', setTrackNameEditMode);
    cancelNameEditButton.addEventListener('click', resetTrackNameField);
    // The double-up is more to get the tests to pass...
    // Clicking works in tests, but not in real life.
    // Focus works in real life, but not in tests.
    nameField.addEventListener('focus', setTrackNameEditMode);
    nameField.addEventListener('click', setTrackNameEditMode);

    /**
     * Edit track transcript buttons
     */
    const transcriptField = document.getElementById('track-transcript-field');
    const editTranscriptButton = document.getElementById('edit-track-transcript');
    const cancelTranscriptEditButton = document.getElementById('cancel-edit-track-transcript');
    const saveTranscriptButton = document.getElementById('save-track-transcript');

    let _originalTrackTranscript = null;

    function setTrackTranscriptEditMode(e) {
      if (_originalTrackTranscript !== '' && !_originalTrackTranscript) {
        _originalTrackTranscript = transcriptField.value;
      }
      transcriptField.focus();

      editTranscriptButton.style.display = 'none';
      cancelTranscriptEditButton.style.display = '';
      saveTranscriptButton.style.display = '';
    };

    function setTrackTranscriptTextMode(e) {
      transcriptField.blur();
      editTranscriptButton.style.display = '';
      cancelTranscriptEditButton.style.display = 'none';
      saveTranscriptButton.style.display = 'none';
    };

    function resetTrackTranscriptField(e) {
      transcriptField.value = _originalTrackTranscript;
      _originalTrackTranscript = null;
      setTrackTranscriptTextMode(e);
    };

    cancelTranscriptEditButton.addEventListener('click', resetTrackTranscriptField);

    editTranscriptButton.addEventListener('click', setTrackTranscriptEditMode);
    transcriptField.addEventListener('focus', setTrackTranscriptEditMode);
    transcriptField.addEventListener('click', setTrackTranscriptEditMode);

    /**
     * PATCH
     *
     * @param function - reset interface
     * @param object - request body
     * @param string - the original value that needs to be reset [name|track]
     */
    function sendUpdate(resetInterface, body, orig) {
      const messages = document.querySelector('.messages');
      const messageContainer = document.createElement('div');
      messageContainer.classList.add('alert');

      fetch("<%= `/${track.path.replace('uploads', 'track')}` %>", {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'Accept': 'application/json'
        },
        body: JSON.stringify(body),
      })
      .then(res => {
        if (res.status === 201) {
          resetInterface();
          setTrackNameTextMode();
          messageContainer.classList.add('alert-success');
        }
        else {
          messageContainer.classList.add('alert-danger');
        }
        messages.appendChild(messageContainer);

        if (orig === 'name') {
          _originalTrackName = null;
        }
        else if (orig === 'track') {
          _originalTrackTranscript = null;
        }

        return res.json();
      })
      .then(data => {
        const message = document.createTextNode(data.message);
        messageContainer.appendChild(message);
      });
    };

    /**
     * Name/transcript updates
     */
    nameField.addEventListener('keydown', function(event) {
      if (event.keyCode === 13) {
        sendUpdate(setTrackNameTextMode, {name: nameField.innerHTML.trim()}, 'name');
      }
    });

    saveNameButton.addEventListener('click', e => {
      sendUpdate(setTrackNameTextMode, {name: nameField.innerHTML.trim()}, 'name');
    });

    saveTranscriptButton.addEventListener('click', () => sendUpdate(setTrackTranscriptTextMode, {transcript: transcriptField.value.trim()}, 'track'));

    // 2021-5-11 https://michilehr.de/overwrite-cmds-and-ctrls-in-javascript
    // Save transcript on Ctrl-S
    transcriptField.addEventListener('keydown', e => {
      if ((window.navigator.platform.match('Mac') ? e.metaKey : e.ctrlKey)  && e.keyCode == 83) {
        e.preventDefault();
        sendUpdate(setTrackTranscriptTextMode, {transcript: transcriptField.value.trim()}, 'track');
      }
    }, false);
  </script>

<% include ../_partials/footer %>

